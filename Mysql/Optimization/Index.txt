

查看當前student_info表中的索引
SHOW INDEX FROM student_info;

給student_id字段添加索引
ALTER TABLE student_info ADD INDEX idx_sid(student_id);

添加聯合索引 ( DESC 排序在8.0才會生效)
ALTER TABLE student_info
ADD INDEX idx_sid_cre_time(student_id,create_time DESC);

添加前綴索引:
alter table shop add index(address(12))

刪除idx_sid索引
DROP INDEX idx_sid ON student_info;



------- 哪些情況適合創建索引 -------
1. 字段的數值有唯一性的限制 (業務上具有唯一特性的自段 即使是組合字段 也必須建成唯一索引)
2. 頻繁作為 WHERE 查詢條件的字段
3. 經常 GROUP BY 和 ORDER BY 的列
4. UPDATE、DELETE 的 WHERE 條件列
5. DISTINCT 字段需要創建索引

6. #### 多表 JOIN 連接操作時，創建索引注意事項
首先 連接表數量境量不超過3張
其次 對WHERE 條件 創建索引
最後 對用於連接的字段創建索引(類型必須一致)

7. 使用列的類型小的創建索引

8. 使用字符串前綴創建索引 (使用索引前綴 無法支持使用索引排序 ORDER BY 會不準)
在 varchar 字段上建立索引時 必須指定索引長度 沒必要對全字段建立索引 根據實際文本區決定索引長度
公式:count(distinct left(列名,索引長度))/count(*) 越接近1越好
例如:
select count(distinct left(address,10)) / count(*) as sub10 -- 擷取前10字符搭選擇度
count(distinct left(address,15)) / count(*) as sub11 -- 擷取前15字符搭選擇度
count(distinct left(address,20)) / count(*) as sub12 -- 擷取前20字符搭選擇度
count(distinct left(address,25)) / count(*) as sub13 -- 擷取前25字符搭選擇度
from shop;

9. 區分度高(散列性高)的列適合作為索引
可使用公式: 計算分區度 越接近1越好 一般超過 33% 就算比較高效的索引
select count(distinct a)/count(*) from t1

10. 使用最頻繁的列放到聯合索引的左側

補充：在多個字段都要創建索引的情況下，聯合索引優於單值索引
     單表不超過6個


-------  哪些情況不適合創建索引 -------
1. 在WHERE(包括 GROUP BY , ORDER BY)中使用不到的字段，不要設置索引
2. 數據量小的表最好不要使用索引
3. 有大量重複數據的列上不要建立索引
結論：當數據重複度大，比如`高於 10% `的時候，也不需要對這個字段使用索引。
4. 避免對經常更新的表創建過多的索引
5. 不建議用無序的值作為索引
6. 刪除不再使用或者很少使用的索引
7. 不要定義冗餘或重複的索引


-------  索引失效 -------

使用函數或表達式操作索引列：
  當在 WHERE 子句中對索引列使用函數或進行計算操作時，索引將失效。例如：
  SELECT * FROM users WHERE YEAR(birth_date) = 1990;

模糊查詢中的通配符位置：
  在使用 LIKE 模糊查詢時，如果通配符（%）出現在字符串的開頭，索引會失效。例如：
  SELECT * FROM users WHERE name LIKE '%John';
  [強制] 頁面收索嚴禁左模糊或全模糊 如有需要走收索引擎解決

OR 條件：
  如果 WHERE 子句中包含 OR 條件，而 OR 前後存在非索引的列，索引將失效。例如：
  SELECT * FROM users WHERE first_name = 'John' OR last_name = 'Doe';
  可以考慮將 OR 條件拆分成多個獨立的查詢，然後使用 UNION 來合併結果。


不等號操作：
  當在 WHERE 子句中使用不等號（!= 或 <>）時，索引將失效。例如：
  SELECT * FROM users WHERE age != 30;

範圍條件之後的列：
  當在複合索引中使用範圍條件（例如 BETWEEN、<、>、IN）時，範圍條件後的索引列將失效。例如：
  SELECT * FROM users WHERE age > 30 AND name = 'John';
  在這個例子中，假設有一個複合索引 (age, name)，則 name 列的索引可能會失效。
  經額 日期查詢 往往都是範圍 應將查詢條件放置where最後(聯合索引創建時 務必把範圍涉及到的字段放最後 sql語句會被優化器重排)

隱式類型轉換：
  當索引列和查詢條件的數據類型不一致時，可能會發生隱式類型轉換，導致索引失效。例如：
  SELECT * FROM users WHERE phone_number = 1234567890;
  如果 phone_number 是 VARCHAR 類型而查詢條件是數字類型，則索引將失效。

IS NULL 可以使用索引 IS NOT NULL 不能使用：
  在某些情況下，使用 IS NULL 或 IS NOT NULL 會導致索引失效。例如：
  SELECT * FROM users WHERE middle_name IS NOT NULL;

未包含在索引中的列：
  如果查詢中的條件列沒有索引，自然會導致索引失效。例如：
  SELECT * FROM users WHERE address = 'New York';
  如果 address 列沒有索引，查詢將執行全表掃描。

數據庫和表的字符集統一使用utf8mb4
  不同的字符集進行比較前需要進行轉換會造成索引失效

數據庫統計信息不準確：
  當數據庫統計信息過時或不準確時，MySQL 優化器可能會做出錯誤的決定，不使用可用的索引。可以通過 ANALYZE TABLE 命令更新統計信息。

  ---------- 一般建議 ----------

  單列索引
    盡量選擇針對當前query過濾性更好的索引

  組合索引
    當前query中過濾性最好的字段在索引字段順序中 位置越靠前越好
    竟量選擇能夠包含當前query中的where子句中更多字段的索引
    如果某個字段可能出現吠完查詢時 竟量把這字段放在索引次序最後面