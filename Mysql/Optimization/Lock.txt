
-- 對某行加共享鎖
SELECT * FROM mytable WHERE id = 1 LOCK IN SHARE MODE;

-- 對某行加排他鎖
SELECT * FROM mytable WHERE id = 1 FOR UPDATE;



-----------------------以下是一些關於行級鎖和索引的重要注意事項-----------------------：

索引優化：
為查詢語句中涉及的字段創建索引，特別是對於經常用於 WHERE 條件的字段。這樣可以避免鎖定不必要的行，並且提高查詢效率。

使用主鍵：
如果可能的話，使用表的主鍵作為 WHERE 條件中的字段。主鍵通常是唯一的，並且默認情況下會有索引。

避免全表掃描：
盡量避免在沒有索引支持的情況下進行全表掃描。全表掃描可能會導致表級鎖定或範圍鎖定
在使用行级锁时，确保 WHERE 条件中涉及的字段有索引是至关重要的。如果没有索引，
MySQL 可能会使用表锁或范围锁，而不是精确锁定指定的行，从而导致意外的锁定行为。

注意隱式鎖定：
有些查詢可能會隱式地鎖定行，尤其是在事務中進行更新操作時。確保在需要的時候明確指定鎖定類型（如 FOR UPDATE 或 LOCK IN SHARE MODE）。

監控鎖情況：
定期監控數據庫中的鎖情況，特別是在高併發環境中。通過分析鎖等待情況和性能瓶頸，及時進行優化。



-----------------------對比共享鎖和排他鎖----------------------------:
特性	                共享鎖（S鎖）  	排他鎖（X鎖）
允許讀操作	           是	          是
允許寫操作	           否	          是
允許其他事務加S鎖	       是	          否
允許其他事務加X鎖	       否	          否
應用場景	      多個事務只讀同一行數據	單個事務需要修改數據


InnoDB會根據SQL指令自動選擇合適的鎖。以下是一些常見操作及其默認鎖定機制：

查詢操作：
普通的 SELECT 語句默認不會添加任何鎖，也就是說是非阻塞的讀取（Read-Uncommitted
如果使用 SELECT ... FOR UPDATE 或 SELECT ... LOCK IN SHARE MODE，則會在讀取數據時加上行級鎖。FOR UPDATE 會加排他鎖（X鎖），而 LOCK IN SHARE MODE 則會加共享鎖（S鎖）。

修改操作：
INSERT、UPDATE、DELETE 等修改操作會默認加上行級排他鎖（X鎖），鎖定受影響的行。
這意味着其他事務在同一行上的讀取或修改操作會被阻塞，直到持有鎖的事務釋放鎖為止。

DDL操作：
ALTER TABLE、DROP TABLE 等數據定義語言（DDL）操作會涉及表級鎖定。
表級鎖會影響整個表的讀寫操作，因此在執行這些DDL操作時可能會阻塞其他對該表的操作，直到DDL操作完成。