
EXPLAIN 分析查詢語句:
EXPLAIN SELECT * FROM student_info;

使用 json 格式呈現(更詳細):
explain format = json

read_cost:
IO成本
檢測rows x (1 - filter) 條紀錄的CPU成本

eval_cost:
檢測rows x filter條紀錄的、成本

prefix_cost:
總成本


在使用索引時用到函數(包含隱式函數 例:VARCHAR 轉 INT) 索引就不會生效
+----+-------------+--------------+--------------+-------+---------------+---------+---------+------+------+----------+-------------+
| id | select_type | table        | partitions   | type  | possible_keys | key     | key_len | ref  | rows | filtered | Extra       |
+----+-------------+--------------+--------------+-------+---------------+---------+---------+------+------+----------+-------------+
|  1 | SIMPLE      | student_info | NULL         | ALL   | NULL          | NULL    | NULL    | NULL |  100 | NULL     | Using where |
+----+-------------+--------------+--------------+-------+---------------+---------+---------+------+------+----------+-------------+

1.id: 查詢的標識符。一個查詢中的每個選擇查詢都會有一個唯一的id。
2.select_type: 查詢的類型。常見的類型有：
    SIMPLE: 簡單查詢，不包含子查詢或 UNION。
    PRIMARY: 最外層的查詢。
    UNION: UNION 中的第二個或後續的查詢。
    UNION RESULT: 使用UNION時臨時表的select_type
    DEPENDENT UNION: UNION 中的第二個或後續的查詢，依賴於外部查詢。
    SUBQUERY: 子查詢中的第一個SELECT。
    DEPENDENT SUBQUERY: 子查詢中的第一個SELECT，依賴於外部查詢。
    DERIVED: 對於派生表的查詢 對應的子查尋 例:select * from (select key1 , count(1) as c from s1 group by key1) as derived_s1 where c > 1
    MATERIALIZED: 子查詢被轉為了物化表
3.table: 查詢中涉及的表。
4.partitions: 显示匹配的分區
5.*type: 連接類型。這是一個非常重要的列，用於判斷查詢的效率。常見的連接類型有(從上到下錶示效率逐漸降低)：
    system: 表只有一行（等於系統表）。
    const: 表最多只有一行匹配，用於主鍵或唯一索引。
    eq_ref: 對每個來自前表的行組合，從表中讀取一行。
    ref: 對匹配某個簡單索引的所有行進行掃描 (以上都很好)。
    fulltext: 表示全文搜索的查詢。
    ref_or_null: 表示索引鍵值包括 NULL 值，用於查詢中包含了 IS NULL 條件的情況。
    index_merge: 表示使用索引合併優化方法。
    unique_subquery: 表示對於子查詢的唯一索引查找。
    index_subquery: 表示對於子查詢的索引查找。
    range: 檢索指定範圍的行，使用一個索引來選擇行 (此為最低要求)。
    index: 可以使用覆蓋索引 但需要掃描全部的索引紀錄時(要查的字段和條件剛好都在聯合索引內)。
    ALL: 全表掃描。
6.possible_keys: 查詢中可能使用的索引。
7.key: 實際使用的索引。如果沒有使用索引，該列显示 NULL。
8.*key_len: 實際使用到的索引長度(字節) 檢查是否充分利用上索引 越大越好(主要針對聯合索引有參考的意義)。
9.ref: 显示列與索引的比較。
10.*rows: MySQL 估計要讀取的行數。這是一個粗略的估計，用於評估查詢的開銷 越小越好。
11.filtered: 表示查詢條件過濾了多少百分比的行 越高越好。
12.*Extra: 額外的信息。有很多可能的值，例如：
    *(優秀)Using index：MySQL 使用覆蓋索引（只從索引中讀取信息，而不是表數據），覆蓋索引：不用回表操作。
    Using where：MySQL 服務器在存儲引擎檢索行后再進行過濾。
    Distinct：MySQL 優化器發現需要執行 DISTINCT 操作以刪除重複行。
    Using index condition：MySQL 通過索引條件下推（Index Condition Pushdown, ICP）來優化查詢，從而減少需要讀取的行數。
    Using join buffer：MySQL 使用連接緩衝區來處理連接操作，通常出現在沒有適當索引的連接操作中。
    Using MRR：多範圍讀取（Multi-Range Read），MySQL 使用 MRR 優化來讀取數據，從而減少隨機 I/O 操作。
    Using intersect(...)：MySQL 使用索引交集來優化查詢。
    Using union(...)：MySQL 使用索引並集來優化查詢。
    Using sort_union(...)：MySQL 使用排序並集來優化查詢。
    Using sort_intersect(...)：MySQL 使用排序交集來優化查詢。
    Using sort_merge(...)：MySQL 使用排序合併來優化查詢。
    *(避免)Using temporary：MySQL 使用臨時表保存結果。
    *(避免)Using filesort：MySQL 使用外部文件來排序結果，而不是通過索引。這表示查詢需要額外的排序步驟，可能會影響性能。
    Range checked for each record (index map: N)：沒有找到合適的索引，MySQL 將對每一行進行索引範圍檢查。
    Full scan on NULL key：查詢在沒有適當索引的情況下進行全表掃描。
    Impossible WHERE noticed after reading const tables：查詢包含一個永遠為假的 WHERE 條件，因此不會返回任何行。
    No tables used：查詢不涉及任何錶。通常出現在計算表達式或系統變量的查詢中。
    Select tables optimized away：優化器在執行查詢時發現可以通過優化避免訪問表，通常出現在 COUNT(*) 查詢中。

--------條優 (**注意 在使用sys或performance_schema information_schema 會消耗大量資源 可能導致業務請求被阻塞)----------------
-------索引相關-------

顯示最近一條 SQL 语句执行后产生的所有警告、错误和通知信息
SHOW WARNINGS;

查看 MySQL 查询优化器的跟踪信息
SELECT * FROM information_schema.optimizer_trace;


查詢冗餘索引
select * from sys.schema_redundant_indexes ;

查詢未使用過的索引
select * from sys.schema_unused_indexes ;

查詢索引的使用狀況
select index_name,rows_selected,rows_inserted,rows_updated,rows_deleted
from sys.schema_index_statistics where table_schema = 'dbname'

-------表相關-------

查詢表的訪問量
select table_schema,table_name,sum(io_read_requests + io_write_requests) as io
from sys.schema_table_statistics
group by table_schema,table_name
order by io desc ;

查詢佔用bufferpool較多的表
select object_schema,object_name,allocated,data
from sys.innodb_buffer_stats_by_table order by allocated limit 10;

查看表的全表掃描狀況
select * from sys.statements_with_full_table_scans where db = 'dbname'

-------語句相關-------

監控SQL執行的頻率
select db,exec_count,query from sys.statement_analysis
order by exec_count desc ;

監控使用了排序的SQL
SELECT db, exec_count, first_seen, last_seen, query
FROM sys.statements_with_sorting
LIMIT 1;

監控使用了臨時表或磁盤臨時表的SQL
select db,exec_count,tmp_tables,tmp_disk_tables,query
from sys.statement_analysis where tmp_tables>0 or tmp_disk_tables > 0
order by (tmp_tables+tmp_disk_tables) desc ;

-------IO相關-------

查看消耗磁盤IO的文件
select file,avg_read,avg_write,avg_read+avg_write as avg_io
from sys.io_global_by_file_by_bytes order by avg_read limit 10;

-------Innodb相關-------

行鎖阻塞情況
select * from sys.innodb_lock_waits