
-------------------------- 基本 -------------------------------
git status

git pull

git push origin main

git push --force**慎用，會覆蓋遠端記錄

git add --all

git commit -m 'xxx'

git log

git checkout main    # 切換到 main 分支
git merge feature   # 把 feature 分支合併到 main

同步最新代碼並變基
git pull --rebase origin main

還原單個文件:
git checkout -- 檔案路徑

暫存變更
git stash pop  # 取回最近一次的 stash
git stash apply stash@{1}  # 取回指定 stash

放暫存
git stash

重載存取
git stash pop

修改當前專案的 Git 提交者
git config user.name "你的正確名稱"
git config user.email "你的正確郵箱"
git config --get user.name
git config --get user.email

修改全局 Git 設定（影響所有專案）
git config --global user.name "你的正確名稱"
git config --global user.email "你的正確郵箱"
git config --global --get user.name
git config --global --get user.email

# 添加一個遠程倉庫
git remote add origin git@github.com:lzz0826/ShardingSphere.git

把現有的倉庫連結到遠端倉庫，執行：
git remote add origin https://github.com/your-username/your-repository.git

如果 origin 已經存在但 URL 錯誤，可以重新設定：
git remote set-url origin <repository-URL>

查看當前修改與原始代碼的差異:
git diff
git diff 檔案路徑

--------------------------  查詢 -------------------------------

git log

查看提交紀錄 案q離開
git log main

查看某個文件的修改紀錄（簡潔列表
git log -- db/mdata/rediskey.go


-------------------------- 分之 -------------------------------

下載所有遠程分支
git fetch origin

查看所有分支
git branch -a

刪除分支
git branch -d <branch>

刪除 "遠程" 分支
git push origin :tzuhsuan_Y12345679-996_dev_master


拉取遠程分支 feat/emailCod
git fetch origin feat/emailCode
這將從遠程倉庫 (origin) 拉取 feat/emailCode 分支的最新更新，但它不會自動創建或切換到本地分支。

要將遠程分支的更改合併到本地分支
git checkout -b feat/emailCode origin/feat/emailCode
這將在本地創建一個名為 feat/emailCode 的新分支，並將其設置為跟蹤遠程分支 origin/feat/emailCode。現在你可以在本地工作並推送更改到遠程分支。

-------------------------- commit -------------------------------
手動還原 `go.work.sum`（適合已經 commit）
如果你已經 commit 了 `go.work.sum` 的改動，但不想它進入 MR，可以：
git checkout origin/master -- go.work.sum
git add go.work.sum
git commit --amend

撤銷最近一次 commit，保留修改內容（常用）
git reset --soft HEAD~1

撤銷最近一次 commit，讓修改回到未暫存狀態
git reset --mixed HEAD~1

撤銷 commit，並清掉修改（非常危險）
git reset --hard HEAD~1

回到某次 410028e7 commit 並推上遠程分支
git reset --hard 410028e7
git push -f origin <分支名>

把當前分支的 commit 重新應用 在指定分支上：
git checkout feature
git rebase main  # 把 feature 分支變基到 main 最新狀態 **變基後可能需要強制 push (git push --force)，影響遠端記錄。

從 另一個分支 把 某個 commit 取出並應用到當前分支：
git checkout main
git cherry-pick abc1234  # 把 abc1234 這個 commit 複製到 main

撤銷 abc1234 這個 commit，但不影響歷史記錄
git revert abc1234


修改最近一次 commit 的作者
git commit --amend --author="Tony <tony@example.com>"
git push --force**慎用，會覆蓋遠端記錄

-------------------------- 解衝突 -------------------------------
解決遠程衝突
git fetch origin
git checkout 你的分支
git merge origin/目标分支

-------------------------- 模塊 -------------------------------

TODO

---推送新分支(正規流程)
1. git checkout -b feat/newBracnch
2. pull origin master
3.改動
4. git status
5. git commit -m ‘update’
6. git pull origin master  (衝突)
7. git push origin feat/newBranch

---------- 推送新分支(正規流程) ----------------------
master 主-生產
release 預發
develop 開發

user_KY1624_merge_dev
user_KY1624_dev_master

master切分支(user_KY1624_merge_dev) -> 開發 -> merge develop(user_KY1624_merge_dev 合develop) -> 開發上測試 ->
切分支(user_KY1624_dev_master) -> merge release(user_KY1624_dev_master 合release)-> 打包 上預發環境 QA 產品驗 ->
merge master(user_KY1624_dev_master 合master) -> 打包上版

Master 拉同步代碼
切分之 tzuhsuan_Y12345679-996_dev_master
tzuhsuan_Y12345679-996_dev_master 寫代碼推 tzuhsuan_Y12345679-996_dev_master 遠程
切
develop 拉同步代碼
切分之 tzuhsuan_Y12345679-996_merge_develop
使用 cherry pick commit 合 tzuhsuan_Y12345679-996_dev_master 自己的多條 commit
tzuhsuan_Y12345679-996_merge_develop 推遠程
tzuhsuan_Y12345679-996_merge_develop 合到 develop

------子模塊更新說明：
克隆主倉庫
git clone --recurse-submodules <主倉庫的URL>
這個命令會同時克隆主倉庫和所有子模塊。

如果已經克隆主倉庫，但沒有拉取子模塊，可以使用以下命令：
git submodule update --init --recursive

更新現有子模塊：
如果主倉庫的子模塊已經存在，但需要更新到最新版本，可以使用：

git submodule update --remote --merge
這將拉取子模塊的最新代碼，併合併到當前分支。

-----忽略衝突文件
使用自己本地的版本 (放棄遠程改動)
git checkout --ours fdadmin-member fdadmin-other fdadmin-withdrawal
git add fdadmin-member fdadmin-other fdadmin-withdrawal

使用遠程的版本 (放棄本地改動)
git checkout --theirs fdadmin-member fdadmin-other fdadmin-withdrawal
git add fdadmin-member fdadmin-other fdadmin-withdrawal


git log 查hard

從遠程倉庫的 main 分支拉取更新，並允許合併不相關的歷史
git pull origin main --allow-unrelated-histories


-----回滾
git reset ：回滾到某次提交。
git reset --soft ：此次提交之後的修改會被退回到暫存區。
git reset --hard ：此次提交之後的修改不做任何保留， git status 查看工作區是沒有記錄的。

單獨還原
git restore docker/goAdminRedis/docker-compose.yml

原特定的文件到特定的分支或提交
git restore --source <commit/branch> <file>

還原該文件到 main 分支的狀態
git restore --source main docker/goAdminRedis/docker-compose.yml


--新增忽略文件
git add .gitignore
git commit -m "Add .gitignore file"
git push



----GitHub 倉庫中刪除已經上傳的文件。這不會刪除本地文件，只是將它們從倉庫中移除。你可以使用以下命令：
git rm --cached 文件名
git rm -r --cached .idea

-- cherry-pick

切換到 main 分支：
git checkout main

查看 feature 分支的日誌，找到需要的提交：
git log feature

應用該提交：
git cherry-pick [commit-hash]

如果成功，main 分支將包含該提交的更改。



